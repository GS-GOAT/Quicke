generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  password      String?
  apiKeys       ApiKey[]
  conversations Conversation[]
  threads       Thread[]
  uploadedFiles UploadedFile[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ApiKey {
  id           String   @id @default(cuid())
  provider     String
  encryptedKey String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  // Add unique constraint for userId + provider combination
  @@unique([userId, provider], name: "userId_provider")
}

model Conversation {
  id            String         @id @default(cuid())
  userId        String
  threadId      String
  createdAt     DateTime       @default(now())
  messages      Message[]
  uploadedFiles UploadedFile[]
  user          User           @relation(fields: [userId], references: [id])
  thread        Thread         @relation(fields: [threadId], references: [id], onDelete: Cascade)
  fileId        String?        
  file          UploadedFile?  @relation("ConversationFile", fields: [fileId], references: [id]) 
}

model Message {
  id             String       @id @default(cuid())
  role           String // 'user' or 'assistant'
  content        String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
}

model Thread {
  id            String         @id @default(cuid())
  userId        String
  title         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  uploadedFiles UploadedFile[]
  user          User           @relation(fields: [userId], references: [id])
}

model UploadedFile {
  id             String   @id @default(cuid())
  userId         String
  fileName       String
  fileType       String
  fileSize       Int
  filePath       String
  content        String?
  threadId       String?
  conversationId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id])
  thread        Thread?        @relation(fields: [threadId], references: [id], onDelete: SetNull)
  conversation  Conversation?  @relation(fields: [conversationId], references: [id], onDelete: SetNull)
  conversations Conversation[] @relation("ConversationFile") 
}
